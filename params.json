{"name":"Godel.js","tagline":"Gödel.js: An attempt to build a model of computation from a minimum set of primitives and applications of recursion and composition.","body":"Gödel.js\r\n========\r\n\r\nAn attempt to build a model of computation (arithmetic, for now) from a minimal \r\nset of primitives and applications of recursion and composition. \r\n\r\nThis is a loose implementation of the *S* language of Computability, Complexity, and Languages by Davis et al.\r\n\r\n### What is this?\r\n\r\nThe whole premise is that **you can build arithmetic from \r\njust 3 simple operations**: increment, decrement, and conditional jumps.\r\n\r\nOf course, Davis defines a conditional jump with a test for equality. Hence, the set of core operations is more like:\r\nincrement (`incr`), decrement (`decr`), conditional branch (`cond`), and equality (`eq`).\r\n\r\n### Caveats\r\n\r\n#### Negative numbers\r\n\r\nInterestingly enough, negative numbers are not supported in the algebra - thus making it toy. \r\n\r\nTake for example, implementing `lt` (less than). For positive numbers, this is easy. \r\nOur definition of `lt` would state \r\nthat *x is less than y if (through repeated decrements) x hits zero before y*. For negative numbers, \r\nyou'd be able to just increment x or y and see if x hits zero first. However, to determine whether you\r\nshould decrement or increment, you need to determine if either of the inputs are negative. \r\n\r\nHow do we determine if the inputs are negative? Well, a negative number is one that is *less than* zero...\r\nHence, to implement `lt` for negative numbers, you'd need `lt` to determine if a number was negative. \r\n\r\nThis is why the algebra only supports positive numbers.\r\n\r\n### The computational model, thus far:\r\n\r\n#### Core operations:\r\n\r\n`incr`: increment\r\n```javascript\r\nincr(4) => 5\r\n```\r\n\r\n`decr`: decrement (stops at zero)\r\n```javascript\r\ndecr(1) => 0\r\ndecr(0) => 0\r\n```\r\n\r\n`cond`: conditional branch\r\n```javascript\r\ncond(some_condition, then_callback_or_value, else_callback_or_value)\r\n\r\ncond(lt(1, 2), function () {\r\n    return true;\r\n},\r\nfunction () {\r\n    return false;\r\n})\r\n\r\n// OR simply\r\n\r\ncond(lt(1, 2), true, false)\r\n```\r\n\r\n`eq`: equality\r\n```javascript\r\neq(1, 1) => true\r\n```\r\n\r\n#### Supported arithmetic operations:\r\n\r\n`neq`: not equal to\r\n```javascript\r\nneq(2, 1) => true\r\n```\r\n\r\n`lt`: less than\r\n```javascript\r\nlt(2, 1) => false\r\n```\r\n\r\n`gt`: greater than\r\n```javascript\r\ngt(2, 1) => true\r\n```\r\n\r\n`lte`: less than or equal to\r\n```javascript\r\nlte(1, 1) => true\r\n```\r\n\r\n`gte`: greater than or equal to\r\n```javascript\r\ngte(1, 2) => false\r\n```\r\n\r\n`add`: addition\r\n```javascript\r\nadd(1, 3) => 4\r\n```\r\n\r\n`sub`: subtraction (stops at zero)\r\n```javascript\r\nsub(2, 1) => 1\r\nsub(2, 3) => 0 // no negatives\r\n```\r\n\r\n`mult`: multiplication\r\n```javascript\r\nmult(2, 2) => 4\r\n```\r\n\r\n`exp`: exponentiation\r\n```javascript\r\nexp(2, 2) => 4\r\nexp(2, 0) => 1\r\n```\r\n\r\nBoolean operations:\r\n\r\n`or`\r\n```javascript\r\nor(lt(1, 2), gt(1, 2)) => true\r\n```\r\n\r\n`and`\r\n```javascript\r\nand(lt(1, 2), gt(1, 2)) => false\r\nand(lt(1, 2), gt(2, 1)) => true\r\n```\r\n\r\n`not`\r\n```javascript\r\nnot(lt(2, 1)) => true\r\n```\r\n\r\n### Demo\r\n\r\nhttp://jsfiddle.net/mrjoelkemp/PNmyk/","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}